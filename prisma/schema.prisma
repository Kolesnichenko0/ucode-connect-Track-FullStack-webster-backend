// prisma/schema.prisma
datasource db {
  provider          = "mysql"
  url               = env("DB_APP_URL")
  shadowDatabaseUrl = env("SHADOW_DB_APP_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

// generator dbml {
//   provider = "prisma-dbml-generator"
//   output   = "../docs/db/generated"
// }

model User {
  id              Int      @id @default(autoincrement())
  password        String   @db.VarChar(255)
  firstName       String   @map("first_name") @db.VarChar(100)
  lastName        String?  @map("last_name") @db.VarChar(100)
  email           String   @unique(map: "uq_users_email") @db.VarChar(255)
  // profileFileId   Int      @default(1) @map("profile_file_id")
  isEmailVerified Boolean  @default(false) @map("is_email_verified")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)

  refreshTokenNonces RefreshTokenNonce[] @relation("UserRefreshTokens")
  // projects           Project[]           @relation("UserProjects")
  // fonts              Font[]              @relation("UserFonts")
  // authoredFiles      File[]              @relation("FileAuthor")
  // profileFile        File                @relation("UserProfileFile", fields: [profileFileId], references: [id])
  // usersFiles         UsersFiles[]        @relation("UserFiles")

  // @@index([profileFileId], map: "fk_users_profile_file_id")
  @@map("users")
}

model RefreshTokenNonce {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  nonce     String   @db.Char(32)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  user User @relation("UserRefreshTokens", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId], map: "fk_refresh_token_nonces_user_id")
  @@index([userId, nonce], map: "idx_refresh_token_nonces_user_id_nonce")
  @@map("refresh_token_nonces")
}

// model File {
//   id         Int        @id @default(autoincrement())
//   isDefault  Boolean    @default(false) @map("is_default")
//   authorId   Int?       @map("author_id")
//   targetType TargetType @map("target_type")
//   fileKey    String     @unique(map: "uq_files_file_key") @map("file_key") @db.VarChar(36)
//   mimeType   String     @map("mime_type") @db.VarChar(100)
//   extension  String     @db.VarChar(10)
//   createdAt  DateTime   @default(now()) @map("created_at") @db.Timestamp(0)
//   updatedAt  DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)

//   author          User?         @relation("FileAuthor", fields: [authorId], references: [id])
//   projectPreviews Project[]     @relation("ProjectPreviewFile")
//   userProfiles    User[]        @relation("UserProfileFile")
//   font            Font?         @relation("FontFile")
//   projectsFiles   ProjectsFiles[] @relation("FileProjects")
//   usersFiles      UsersFiles[]  @relation("FileUsers")

//   @@index([authorId], map: "fk_files_author_id")
//   @@map("files")
// }

// model Project {
//   id            Int      @id @default(autoincrement())
//   userId        Int?     @map("user_id")
//   isDefault     Boolean  @default(false) @map("is_default")
//   title         String   @db.VarChar(100)
//   description   String?  @db.Text
//   content       Json
//   previewFileId Int      @unique(map: "uq_fk_projects_preview_file_id") @map("preview_file_id")
//   createdAt     DateTime @default(now()) @map("created_at") @db.Timestamp(0)
//   updatedAt     DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)

//   user          User?    @relation("UserProjects", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   previewFile   File     @relation("ProjectPreviewFile", fields: [previewFileId], references: [id])
//   projectsFiles ProjectsFiles[] @relation("ProjectFiles")

//   @@index([userId], map: "fk_projects_user_id")
//   @@index([userId, title], map: "idx_projects_user_id_title")
//   @@map("projects")
// }

// model Font {
//   id        Int      @id @default(autoincrement())
//   userId    Int?     @map("user_id")
//   title     String   @db.VarChar(100)
//   fileId    Int      @unique(map: "uq_fk_fonts_file_id") @map("file_id")
//   createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
//   updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)

//   user  User? @relation("UserFonts", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   file  File  @relation("FontFile", fields: [fileId], references: [id])

//   @@index([userId], map: "fk_fonts_user_id")
//   @@index([userId, title], map: "idx_fonts_user_id_title")
//   @@map("fonts")
// }

// model ProjectsFiles {
//   projectId   Int      @map("project_id")
//   fileId      Int      @map("file_id")
//   createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(0)

//   project Project @relation("ProjectFiles", fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   file    File    @relation("FileProjects", fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

//   @@id([projectId, fileId], map: "pk_projects_files_project_id_file_id")
//   @@index([projectId], map: "fk_projects_files_project_id")
//   @@index([fileId], map: "fk_projects_files_file_id")
//   @@map("projects_files")
// }

// model UsersFiles {
//   userId     Int      @map("user_id")
//   fileId     Int      @map("file_id")
//   createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(0)

//   user User @relation("UserFiles", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   file File @relation("FileUsers", fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

//   @@id([userId, fileId], map: "pk_users_files_user_id_file_id")
//   @@index([userId], map: "fk_users_files_user_id")
//   @@index([fileId], map: "fk_users_files_file_id")
//   @@map("users_files")
// }

// enum TargetType {
//   PROJECT_ASSET   @map("project_asset")
//   USER_AVATAR     @map("user_avatar")
//   PROJECT_PREVIEW @map("project_preview")
//   FONT_ASSET      @map("font_asset")
// }